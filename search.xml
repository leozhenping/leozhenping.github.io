<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Docker registry删除镜像方法]]></title>
    <url>%2F2018%2F09%2F20%2Fdocker%2F</url>
    <content type="text"><![CDATA[docker-distribution主配置文件123456789101112131415161718192021config.yml: version: 0.1 log: fields: service: registry storage: delete: enabled: true #需要开启存储删除功能，才能使用接口删除镜像。 cache: blobdescriptor: inmemory filesystem: rootdirectory: /var/lib/registry http: addr: :5000 headers: X-Content-Type-Options: [nosniff] health: storagedriver: enabled: true interval: 10s threshold: 3 删除Image的步骤 1、获取Etag字段中的sha256的字段 12345678910curl -i -X GET --header &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; http://localhost:5000/v2/镜像名称/manifests/标签 HTTP/1.1 200 OK Content-Length: 3047 Content-Type: application/vnd.docker.distribution.manifest.v2+json Docker-Content-Digest: sha256:4111f52442b430fa1c758156cb20dd7884dbde3fcbc969f166850d9f6da06035 Docker-Distribution-Api-Version: registry/2.0 Etag: &quot;sha256:4111f52442b430fa1c758156cb20dd7884dbde3fcbc969f166850d9f6da06035&quot; #获取Etag字段的VaLue,sha256:xxx字段。 X-Content-Type-Options: nosniff Date: Wed, 11 Apr 2018 05:51:24 GMT 2、根据Etag字段来删除标签 123456789101112131415161718curl -k -v -s -X DELETE http://localhost:5000/v2/tomcat/manifests/ETAG * About to connect() to localhost port 5000 (#0) * Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 5000 (#0) &gt; DELETE /v2/tomcat/manifests/sha256:4111f52442b430fa1c758156cb20dd7884dbde3fcbc969f166850d9f6da06035 HTTP/1.1 &gt; User-Agent: curl/7.29.0 &gt; Host: localhost:5000 &gt; Accept: */* &gt; &lt; HTTP/1.1 202 Accepted #返回202 Accepted内容，即表示删除成功 &lt; Docker-Distribution-Api-Version: registry/2.0 &lt; X-Content-Type-Options: nosniff &lt; Date: Wed, 11 Apr 2018 05:56:21 GMT &lt; Content-Length: 0 &lt; Content-Type: text/plain; charset=utf-8 &lt; * Connection #0 to host localhost left intact 3、获取标签，以确认删除标签成功 12curl -X GET http://localhost:5000/v2/tomcat/tags/list &#123;&quot;name&quot;:&quot;ubuntu&quot;,&quot;tags&quot;:null&#125; 4、释放磁盘空间 12345678910# registry garbage-collect /etc/docker-distribution/registry/config.yml 10 blobs marked, 15 blobs eligible for deletion #返回10个blobs被标记，15个适合删除的块。blob eligible for deletion: sha256:68fb305098765361009a270c1e5293e3972d008761ee30260e8797adf950a830INFO[0000] Deleting blob: /docker/registry/v2/blobs/sha256/68/68fb305098765361009a270c1e5293e3972d008761ee30260e8797adf950a830 go.version=go1.8.3 instance.id=ffccf012-55fc-440d-8820-9f8c7393ad09 #INFO信息中，返回的是: 块所对应的文件路径blob eligible for deletion:sha256:96e1d8c6601afdc4b27ce3e6bb9c9460e788cb5f66a6cc71255e88a004071ecdINFO[0000] Deleting blob: /docker/registry/v2/blobs/sha256/96/96e1d8c6601afdc4b27ce3e6bb9c9460e788cb5f66a6cc71255e88a004071ecd go.version=go1.8.3 instance.id=ffccf012-55fc-440d-8820-9f8c7393ad09blob eligible for deletion: sha256:0b54f3727113712ee413d614a38f2a7e25c568d7c951c56487a90d4434426646## curl -X GET http://localhost:5000/v2/_catalog : 获取镜像的名称列表当删除镜像后，需要重新上传时，遇到错误: Layer already exists, 需要重启docker-distribution服务即可。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubernetes]]></title>
    <url>%2F2018%2F09%2F19%2Fkubernetes%2F</url>
    <content type="text"><![CDATA[Kubernetes安装环境说明1234567master01: 172.20.40.200master02: 172.20.40.201master03: 172.20.40.202node01: 172.20.40.203node02: 172.20.40.204node03: 172.20.40.205harbor: 172.20.40.199 安装harbor服务Harbor 安装前准备安装docker12345678# yum install -y yum-utils device-mapper-persistent-data lvm2# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# yum -y install docker-ce# docker --versionDocker version 17.06.2-ce, build cec0b72# systemctl start docker# systemctl status docker# systemctl enable docker 安装docker-compose1234# yum -y install python-pip# pip install --upgrade pip# pip install docker-compose# docker-compose version 安装 Habor12345678910111213141516171819# wget https://storage.googleapis.com/harbor-releases/release-1.6.0/harbor-offline-installer-v1.6.0.tgz# tar xf harbor-offline-installer-v1.6.0.tgz# cd harbor# docker load -i harbor.v1.6.0.tar.gz# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEgoharbor/chartmuseum-photon v0.7.1-v1.6.0 99bfb7b3aa9c 4 weeks ago 357MBgoharbor/harbor-migrator v1.6.0 23ed5c5918a0 4 weeks ago 803MBgoharbor/redis-photon v1.6.0 745667dc5aa8 4 weeks ago 214MBgoharbor/clair-photon v2.0.5-v1.6.0 01cb5fff1728 4 weeks ago 308MBgoharbor/notary-server-photon v0.5.1-v1.6.0 11dfd338b15c 4 weeks ago 215MBgoharbor/notary-signer-photon v0.5.1-v1.6.0 08436cc747a3 4 weeks ago 212MBgoharbor/registry-photon v2.6.2-v1.6.0 1ec7d8d4f0fd 4 weeks ago 201MBgoharbor/nginx-photon v1.6.0 81df0f8a78c0 4 weeks ago 138MBgoharbor/harbor-log v1.6.0 0f474b9d4565 4 weeks ago 203MBgoharbor/harbor-jobservice v1.6.0 4e6a3afe6802 4 weeks ago 198MBgoharbor/harbor-ui v1.6.0 9cf3894e769e 4 weeks ago 221MBgoharbor/harbor-adminserver v1.6.0 14d9ee1bbda3 4 weeks ago 187MBgoharbor/harbor-db v1.6.0 5c39f18ce348 4 weeks ago 225MB 配置harbor12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# sed -i &quot;s/reg.mydomain.com/registry01.isesol.local/g&quot; harbor.cfg# grep ^[a-z] harbor.cfg hostname = registry01.isesol.localui_url_protocol = httpmax_job_workers = 10 customize_crt = onssl_cert = /data/cert/server.crtssl_cert_key = /data/cert/server.keysecretkey_path = /dataadmiral_url = NAlog_rotate_count = 50log_rotate_size = 200Mhttp_proxy =https_proxy =no_proxy = 127.0.0.1,localhost,ui,registryemail_identity = email_server = smtp.mydomain.comemail_server_port = 25email_username = admin@mydomain.comemail_password = abcemail_from = admin &lt;admin@mydomain.com&gt;email_ssl = falseemail_insecure = falseharbor_admin_password = 12345678auth_mode = ldap_authldap_url = ldap://172.20.10.61:389ldap_searchdn = uid=confluence,ou=users,dc=isesol,dc=localldap_search_pwd = 12345678ldap_basedn = ou=users,dc=isesol,dc=localldap_filter = (objectClass=person)ldap_uid = uidldap_scope = 3 ldap_timeout = 5ldap_verify_cert = trueldap_group_basedn = ou=users,dc=isesol,dc=localldap_group_filter = objectclass=groupldap_group_gid = cnldap_group_scope = 2self_registration = ontoken_expiration = 30project_creation_restriction = everyonedb_host = postgresqldb_password = root123db_port = 5432db_user = postgresredis_host = redisredis_port = 6379redis_password = redis_db_index = 1,2,3clair_db_host = postgresqlclair_db_password = root123clair_db_port = 5432clair_db_username = postgresclair_db = postgresclair_updaters_interval = 12uaa_endpoint = uaa.mydomain.orguaa_clientid = iduaa_clientsecret = secretuaa_verify_cert = trueuaa_ca_cert = /path/to/ca.pemregistry_storage_provider_name = filesystemregistry_storage_provider_config =registry_custom_ca_bundle = 注:harbor 的主机名 hostname 不能注释再指定，必须删除默认设置再指定主机名，不然会产生错误。 安装 harbor1# ./install.sh 查看容器状况1234567891011# docker-compose ps Name Command State Ports -------------------------------------------------------------------------------------------------------------------------------------harbor-adminserver /harbor/start.sh Up (healthy) harbor-db /entrypoint.sh postgres Up (healthy) 5432/tcp harbor-jobservice /harbor/start.sh Up harbor-log /bin/sh -c /usr/local/bin/ ... Up (healthy) 127.0.0.1:1514-&gt;10514/tcp harbor-ui /harbor/start.sh Up (healthy) nginx nginx -g daemon off; Up (healthy) 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp, 0.0.0.0:80-&gt;80/tcpredis docker-entrypoint.sh redis ... Up 6379/tcp registry /entrypoint.sh /etc/regist ... Up (healthy) 5000/tcp Harbor共由七个容器组成: harbor-adminserver:harbor系统管理服务 harbor-db: 由官方mysql镜像构成的数据库容器 harbor-jobservice:harbor的任务管理服务 harbor-log:harbor的日志收集、管理服务 harbor-ui:harbor的web页面服务 nginx:负责流量转发和安全验证 registry:官方的Docker registry，负责保存镜像 更改 docker 配置12345[root@registry01 harbor]# cat /etc/docker/daemon.json &#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;], #加速docker &quot;insecure-registries&quot;: [&quot;registry01.isesol.local&quot;] #加入非安全访问服务器&#125; 登陆 harbor1234567# docker login -u admin -p 12345678 registry01.isesol.localLogin Succeeded# docker login registry01.isesol.localUsername: adminPassword: Login Succeeded harbor服务管理12345678停止harbor# docker-compose stop启动harbor# docker-compose start重新Prepare# docker-compose down -v# ./prepare# docker-compose up -d harbor日志存放位置123456789# ll /var/log/harbor/-rw-r----- 1 10000 10000 602211 10月 10 11:08 adminserver.log-rw-r----- 1 10000 10000 46360 10月 9 18:06 jobservice.log-rw-r----- 1 10000 10000 25644 10月 9 17:07 mysql.log-rw-r----- 1 10000 10000 63488 10月 9 18:06 postgresql.log-rw-r----- 1 10000 10000 410516 10月 10 11:08 proxy.log-rw-r----- 1 10000 10000 160657 10月 10 11:05 redis.log-rw-r----- 1 10000 10000 319761 10月 10 11:08 registry.log-rw-r----- 1 10000 10000 1078369 10月 10 11:08 ui.log harbor ldap配置]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
  </entry>
</search>
